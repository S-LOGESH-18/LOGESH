 import numpy as np


x = np.array([1, 3, 5, 7, 9, 3])
y = np.array([3, 2, 1, 6, 4, 8])


k = 2

# assume random centroids
centroids_x = np.random.randint(min(x), max(x), size=k)
centroids_y = np.random.randint(min(y), max(y), size=k)


clusters = {}
for i in range(k):
    clusters[f'Cluster {i+1}'] = []

# Euclidean distance
def euclidean_distance(x1, y1, x2, y2):
    return np.sqrt((x1 - x2)**2 + (y1 - y2)**2)

# Assign to clusters
def assign_to_clusters(x, y, centroids_x, centroids_y):
    clusters = {}
    for i in range(k):
        clusters[f'Cluster {i+1}'] = []

    for i in range(len(x)):
        distances = [euclidean_distance(x[i], y[i], centroids_x[j], centroids_y[j]) for j in range(k)]
        cluster_index = np.argmin(distances)
        clusters[f'Cluster {cluster_index + 1}'].append((x[i], y[i]))

    return clusters


def update_centroids(clusters):
    centroids_x = []
    centroids_y = []
    for cluster in clusters.values():
        cluster_x = [point[0] for point in cluster]
        cluster_y = [point[1] for point in cluster]
        centroids_x.append(np.mean(cluster_x))
        centroids_y.append(np.mean(cluster_y))

    return np.array(centroids_x), np.array(centroids_y)
# K-means clustering
max_iterations = 100
for i in range(max_iterations):
    # Assign data points based on current centroids
    clusters = assign_to_clusters(x, y, centroids_x, centroids_y)


    new_centroids_x, new_centroids_y = update_centroids(clusters)

    if np.array_equal(centroids_x,   new_centroids_x) and  np.array_equal( centroids_y,  new_centroids_y):
        break

    centroids_x,centroids_y = new_centroids_x,new_centroids_y

# Print
for cluster_name, cluster_points in clusters.items():
    print(f'{cluster_name} - {cluster_points}')

#linear 

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

data=[[0,4],[1,8],[2,12],[3,16],[4,20],[5,2400]];
df = pd.DataFrame(data, columns=['xv', 'yv'])
df



def estimatecof(x,y):
  n=np.size(x)
  mx=np.mean(x)
  my=np.mean(y)
  xy=np.sum(y*x)-n*mx*my
  xx=np.sum(x*x)-n*mx*mx
  b1=xy/xx
  b0=my-b1*mx
  return(b0,b1)

def plotregline(x,y,b):
  plt.scatter(x,y)
  ypred=b[0]+b[1]*x
  plt.plot(x,ypred,color="g")
  plt.xlabel("xvalue")
  plt.ylabel("yvalue")
  plt.show()

def main():
  x=np.array(df.xv.values)
  y=np.array(df.yv.values)
  b0,b1=estimatecof(x,y)
  plotregline(x,y,(b0,b1))

  x_input =790

  y_predicted = b0+b1 * x_input

  print(f'Predicted y for x = {x_input}: {y_predicted}')

if __name__ == "__main__":
  main()
